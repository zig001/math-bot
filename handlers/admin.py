from telebot import types
from telebot.types import Message, CallbackQuery
from datetime import datetime
from config import bot_state, ADMINS, DEBUG
from database.crud import get_all_users, get_users_without_images, get_user_count
from utils.keyboards import (
    admin_panel_markup,
    cancel_markup
)

def setup_admin_handlers(bot):
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    def is_admin(user_id: int) -> bool:
        return user_id in ADMINS

    def send_not_admin_message(chat_id: int):
        bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    def show_admin_panel(chat_id, message_id=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        
        users_count = get_user_count()
        users_without_images = get_users_without_images()
        users_with_images = users_count - len(users_without_images)
        
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if bot_state.active else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        collection_status = f"üü¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ, –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {users_with_images}/{users_count}" if bot_state.current_collection['active'] else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–Ω–æ"
        
        text = (
            f"‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status}\n"
            f"–°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {collection_status}"
        )
        
        if message_id:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=admin_panel_markup()
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(
                chat_id,
                text,
                reply_markup=admin_panel_markup()
            )

    @bot.message_handler(commands=['admin'])
    def handle_admin_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if message.from_user.id not in ADMINS:
            return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        show_admin_panel(message.chat.id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    @bot.callback_query_handler(func=lambda call: call.data == 'undo_collection')
    def handle_toggle_bot(call: CallbackQuery):
        if not is_admin(call.from_user.id):
            return bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        
        bot_state.current_collection['active'] = False
        bot.answer_callback_query(call.id, "–°–±–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        show_admin_panel(call.message.chat.id, call.message.message_id)
    
    @bot.callback_query_handler(func=lambda call: call.data == 'toggle_bot')
    def handle_toggle_bot(call: CallbackQuery):
        if not is_admin(call.from_user.id):
            return bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        
        bot_state.active = not bot_state.active
        status = "–≤–∫–ª—é—á–µ–Ω" if bot_state.active else "–≤—ã–∫–ª—é—á–µ–Ω"
        
        bot.answer_callback_query(call.id, f"–ë–æ—Ç {status}")
        show_admin_panel(call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == 'collect_images')
    def handle_collect_images(call: CallbackQuery):
        if not is_admin(call.from_user.id):
            return bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        
        bot_state.current_collection['active'] = True
        bot_state.current_collection['send_to_id'] = call.message.chat.id
        bot_state.current_collection['start_time'] = datetime.now().timestamp()
        print("–Ω–∞—á–∞–ª–æ—Å—å")
        
        msg = bot.send_message(
            call.message.chat.id,
            "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
            reply_markup=cancel_markup()
        )
        bot.register_next_step_handler(msg, send_message_to_users)
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == 'resend_collection')
    def handle_resend_collection(call: CallbackQuery):
        if not is_admin(call.from_user.id):
            return bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        
        users = get_users_without_images()
        if not users:
            return bot.answer_callback_query(call.id, "‚úÖ –í—Å–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", show_alert=True)
            
        msg = bot.send_message(
            call.message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∏–≤–∫–∏:",
            reply_markup=cancel_markup()
        )
        bot.register_next_step_handler(msg, lambda m: send_message_to_users(m, users))
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == 'send_to_all')
    def handle_resend_collection(call: CallbackQuery):
        if not is_admin(call.from_user.id):
            return bot.answer_callback_query(call.id, "‚õî –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        
        msg = bot.send_message(
            call.message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
            reply_markup=cancel_markup()
        )
        bot.register_next_step_handler(msg, send_message_to_users)
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == 'cancel_action')
    def handle_cancel_action(call: CallbackQuery):
        bot.answer_callback_query(call.id)
        show_admin_panel(call.message.chat.id, call.message.message_id)

    def send_message_to_users(message: Message, users = None):
        if not users:
            users = get_all_users()
        
        if message.content_type == 'text':
            collection_text = message.text
        elif message.content_type == 'photo':
            collection_text = message.caption or ""
        else:
            bot.reply_to(message, "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é")
            return
        success = 0

        for user in users:
            try:
                if message.content_type == 'text':
                    bot.send_message(user.user_id, collection_text)
                elif message.content_type == 'photo':
                    bot.send_photo(user.user_id, message.photo[-1].file_id, caption=collection_text)
                success += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
        
        bot.send_message(
            bot_state.current_collection['send_to_id'],
            f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        )
        show_admin_panel(message.chat.id)